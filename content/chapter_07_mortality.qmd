# Mortality Table Implementation

## Standard Mortality Tables

Mortality tables are fundamental to pension calculations. This section provides practical implementation of standard actuarial tables [@soa_mortality2014].

### Basic Mortality Table Structure

```{r}
#| label: mortality-table-setup
# Create a simplified mortality table structure
# In practice, you would load this from standard tables like RP-2014
create_sample_mortality_table <- function() {
  ages <- 20:110

  # Simplified Gompertz-Makeham mortality rates
  # q_x = A + B * C^x where A = 0.0001, B = 0.00005, C = 1.08
  q_x <- pmin(0.0001 + 0.00005 * 1.08^ages, 0.95)

  mortality_table <- data.frame(
    age = ages,
    q_x = q_x,
    p_x = 1 - q_x
  )

  # Calculate survival probabilities from age 20
  mortality_table$l_x <- numeric(length(ages))
  mortality_table$l_x[1] <- 100000 # Radix of 100,000

  for (i in 2:length(ages)) {
    mortality_table$l_x[i] <- mortality_table$l_x[i - 1] *
      mortality_table$p_x[i - 1]
  }

  return(mortality_table)
}

# Create sample table
mortality_table <- create_sample_mortality_table()

# Display first few rows
head(mortality_table, 10)
```

### Survival Probability Functions

```{r}
#| label: survival-functions
# Function to calculate t-year survival probability from age x
calculate_survival_probability <- function(mortality_table, age_x, years_t) {
  if (
    age_x < min(mortality_table$age) ||
      age_x + years_t > max(mortality_table$age)
  ) {
    return(0)
  }

  start_idx <- which(mortality_table$age == age_x)
  end_idx <- which(mortality_table$age == age_x + years_t)

  if (length(start_idx) == 0 || length(end_idx) == 0) {
    return(0)
  }

  return(mortality_table$l_x[end_idx] / mortality_table$l_x[start_idx])
}

# Function to calculate life annuity values (immediate or deferred)
calculate_life_annuity <- function(
  mortality_table,
  start_age,
  payment_start_age = NULL,
  discount_rate,
  annual_payment = 1
) {
  # If no payment start age specified, annuity starts immediately
  if (is.null(payment_start_age)) {
    payment_start_age <- start_age
  }

  # Calculate probability of survival to payment start (1 if immediate)
  if (payment_start_age > start_age) {
    survival_to_payment <- calculate_survival_probability(
      mortality_table,
      start_age,
      payment_start_age - start_age
    )
  } else {
    survival_to_payment <- 1
  }

  # Calculate present value of annuity starting at payment_start_age
  annuity_value <- 0
  current_age <- payment_start_age

  while (
    current_age <= max(mortality_table$age) &&
      current_age < payment_start_age + 50
  ) {
    # Limit to reasonable age

    # Survival probability from payment start to current age
    if (current_age == payment_start_age) {
      surv_from_payment_start <- 1
    } else {
      surv_from_payment_start <- calculate_survival_probability(
        mortality_table,
        payment_start_age,
        current_age - payment_start_age
      )
    }

    if (surv_from_payment_start < 0.001) {
      break
    } # Negligible probability

    # Present value of payment at current age (from original start age)
    years_from_start <- current_age - start_age
    pv_payment <- annual_payment *
      surv_from_payment_start *
      (1 + discount_rate)^(-years_from_start)

    annuity_value <- annuity_value + pv_payment
    current_age <- current_age + 1
  }

  return(annuity_value * survival_to_payment)
}

# Wrapper function for deferred annuity (backwards compatibility)
calculate_deferred_annuity <- function(
  mortality_table,
  start_age,
  payment_age,
  discount_rate,
  annual_payment = 1
) {
  return(calculate_life_annuity(
    mortality_table,
    start_age,
    payment_age,
    discount_rate,
    annual_payment
  ))
}

# Examples
survival_30_to_65 <- calculate_survival_probability(mortality_table, 30, 35)
cat("Probability of surviving from age 30 to 65:", survival_30_to_65, "\n")

annuity_30_defer_to_65 <- calculate_life_annuity(mortality_table, 30, 65, 0.07)
cat(
  "Present value of $1 annuity deferred from age 30 to 65:",
  annuity_30_defer_to_65,
  "\n"
)
```

### Multiple Decrement Tables

```{r}
#| label: multiple-decrements
# Create a service table with multiple decrements
create_service_table <- function(
  mortality_table,
  withdrawal_rates = NULL,
  disability_rates = NULL
) {
  ages <- mortality_table$age
  n_ages <- length(ages)

  # Default withdrawal rates (higher at younger ages)
  if (is.null(withdrawal_rates)) {
    withdrawal_rates <- pmax(0.15 * exp(-0.1 * (ages - 20)), 0.01)
    withdrawal_rates[ages >= 65] <- 0 # No withdrawal after retirement
  }

  # Default disability rates (increasing with age)
  if (is.null(disability_rates)) {
    disability_rates <- pmin(0.001 * 1.05^(ages - 20), 0.02)
    disability_rates[ages >= 65] <- 0 # No disability after retirement
  }

  service_table <- data.frame(
    age = ages,
    q_x_death = mortality_table$q_x,
    q_x_withdrawal = withdrawal_rates,
    q_x_disability = disability_rates
  )

  # Calculate composite survival probability
  service_table$q_x_total <- with(
    service_table,
    q_x_death + q_x_withdrawal + q_x_disability
  )
  service_table$q_x_total <- pmin(service_table$q_x_total, 0.95) # Cap at 95%
  service_table$p_x_active <- 1 - service_table$q_x_total

  # Calculate active life table
  service_table$l_x_active <- numeric(n_ages)
  service_table$l_x_active[1] <- 100000

  for (i in 2:n_ages) {
    service_table$l_x_active[i] <- service_table$l_x_active[i - 1] *
      service_table$p_x_active[i - 1]
  }

  return(service_table)
}

# Create service table
service_table <- create_service_table(mortality_table)

# Display sample
head(service_table[service_table$age %in% 25:35, ], 10)
```

## Industry Standard Mortality Tables

### RP-2014 Mortality Table Implementation

The RP-2014 mortality tables are widely used industry standards for pension valuations in the United States. Below is an implementation using actual RP-2014 base rates with MP-2021 improvement scales.

```{r}
#| label: rp2014-mortality-setup
# RP-2014 Total Dataset (Healthy Annuitant) - Sample rates
# Full tables available from Society of Actuaries
create_rp2014_mortality_table <- function(
  table_type = "healthy_annuitant",
  gender = "male",
  improvement_year = 2024
) {
  
  # Sample of RP-2014 base mortality rates (2014)
  # In practice, load full tables from SOA data files
  if (gender == "male") {
    # RP-2014 Healthy Annuitant Male rates (sample)
    base_rates <- data.frame(
      age = c(50:70),
      q_x_2014 = c(
        0.002906, 0.003267, 0.003606, 0.003922, 0.004272,  # 50-54
        0.004697, 0.005205, 0.005799, 0.006537, 0.007452,  # 55-59
        0.008477, 0.009585, 0.010846, 0.012325, 0.014090,  # 60-64
        0.016145, 0.018477, 0.021074, 0.023928, 0.027031,  # 65-69
        0.030375                                            # 70
      )
    )
  } else {
    # RP-2014 Healthy Annuitant Female rates (sample)
    base_rates <- data.frame(
      age = c(50:70),
      q_x_2014 = c(
        0.001869, 0.002098, 0.002349, 0.002625, 0.002928,  # 50-54
        0.003262, 0.003634, 0.004048, 0.004509, 0.005024,  # 55-59
        0.005605, 0.006264, 0.007020, 0.007896, 0.008920,  # 60-64
        0.010131, 0.011563, 0.013244, 0.015195, 0.017428,  # 65-69
        0.019954                                            # 70
      )
    )
  }
  
  # Apply MP-2021 improvement scale (simplified)
  # Actual implementation would use full MP-2021 scale factors by age
  years_of_improvement <- improvement_year - 2014
  
  # Sample improvement factors (simplified - actual varies by age)
  if (gender == "male") {
    annual_improvement <- 0.01  # 1% annual improvement (simplified)
  } else {
    annual_improvement <- 0.0095  # 0.95% annual improvement (simplified)
  }
  
  # Apply improvement to base rates
  base_rates$q_x <- base_rates$q_x_2014 * 
    (1 - annual_improvement)^years_of_improvement
  
  # Add survival probability
  base_rates$p_x <- 1 - base_rates$q_x
  
  # Calculate life table values
  base_rates$l_x <- numeric(nrow(base_rates))
  base_rates$l_x[1] <- 100000
  
  for (i in 2:nrow(base_rates)) {
    base_rates$l_x[i] <- base_rates$l_x[i-1] * base_rates$p_x[i-1]
  }
  
  # Add life expectancy calculation
  base_rates$e_x <- numeric(nrow(base_rates))
  for (i in 1:nrow(base_rates)) {
    remaining_life <- 0
    for (j in i:nrow(base_rates)) {
      if (j == i) {
        surv_prob <- 1
      } else {
        surv_prob <- base_rates$l_x[j] / base_rates$l_x[i]
      }
      remaining_life <- remaining_life + surv_prob
    }
    base_rates$e_x[i] <- remaining_life
  }
  
  return(base_rates)
}

# Create male and female RP-2014 tables
rp2014_male <- create_rp2014_mortality_table("healthy_annuitant", "male", 2024)
rp2014_female <- create_rp2014_mortality_table("healthy_annuitant", "female", 2024)

# Display comparison
cat("RP-2014 Mortality Rates (with MP-2021 improvement to 2024)\n")
cat("===========================================================\n")
comparison <- data.frame(
  Age = rp2014_male$age,
  Male_qx = round(rp2014_male$q_x, 6),
  Female_qx = round(rp2014_female$q_x, 6),
  Male_ex = round(rp2014_male$e_x, 1),
  Female_ex = round(rp2014_female$e_x, 1)
)
print(comparison[c(1, 6, 11, 16, 21), ])  # Show ages 50, 55, 60, 65, 70
```

### Generational Mortality Projection

```{r}
#| label: generational-mortality
# Function to project mortality with generational improvements
project_generational_mortality <- function(
  base_table,
  birth_year,
  valuation_year,
  improvement_scale = "MP-2021"
) {
  
  # Calculate current age
  current_age <- valuation_year - birth_year
  
  # Find base mortality rate
  base_row <- base_table[base_table$age == current_age, ]
  if (nrow(base_row) == 0) {
    return(NA)
  }
  
  # Apply generational projection
  # Each future year gets additional improvement
  future_rates <- data.frame(
    future_age = current_age:min(current_age + 50, 120),
    calendar_year = valuation_year:(valuation_year + 
      min(50, 120 - current_age))
  )
  
  # Simplified improvement (actual would use age-specific factors)
  annual_improvement <- 0.01
  
  future_rates$q_x <- base_row$q_x * 
    (1 - annual_improvement)^(0:(nrow(future_rates)-1))
  
  future_rates$p_x <- 1 - future_rates$q_x
  
  return(future_rates)
}

# Example: Project mortality for someone born in 1964
birth_1964_projection <- project_generational_mortality(
  rp2014_male, 
  birth_year = 1964, 
  valuation_year = 2024
)

cat("\nGenerational Mortality Projection for 1964 Birth Cohort\n")
cat("Age 60 Male, valued in 2024\n")
cat("========================================================\n")
print(head(birth_1964_projection, 10))
```

### Mortality Table Comparison

```{r}
#| label: mortality-comparison
# Compare different mortality assumptions
compare_mortality_tables <- function(age_range = 50:70) {
  
  # Get simplified table from earlier
  simple_mort <- mortality_table[mortality_table$age %in% age_range, ]
  
  # Get RP-2014 rates
  rp2014_m <- rp2014_male[rp2014_male$age %in% age_range, ]
  rp2014_f <- rp2014_female[rp2014_female$age %in% age_range, ]
  
  comparison <- data.frame(
    Age = age_range,
    Simplified_qx = round(simple_mort$q_x[1:length(age_range)], 6),
    RP2014_Male_qx = round(rp2014_m$q_x, 6),
    RP2014_Female_qx = round(rp2014_f$q_x, 6)
  )
  
  # Calculate ratio of RP-2014 to simplified
  comparison$Male_Ratio <- round(
    comparison$RP2014_Male_qx / comparison$Simplified_qx, 2
  )
  comparison$Female_Ratio <- round(
    comparison$RP2014_Female_qx / comparison$Simplified_qx, 2
  )
  
  return(comparison)
}

# Show comparison
mortality_comparison <- compare_mortality_tables(seq(50, 70, 5))
cat("\nMortality Table Comparison\n")
cat("==========================\n")
print(mortality_comparison)

# Calculate impact on annuity values
annuity_simple <- calculate_life_annuity(mortality_table, 65, 65, 0.05)
annuity_rp2014_m <- calculate_life_annuity(
  rp2014_male, 65, 65, 0.05
)
annuity_rp2014_f <- calculate_life_annuity(
  rp2014_female, 65, 65, 0.05
)

cat("\nLife Annuity Values (Age 65, 5% discount)\n")
cat("==========================================\n")
cat("Simplified Table:  $", round(annuity_simple, 2), "\n")
cat("RP-2014 Male:      $", round(annuity_rp2014_m, 2), "\n")  
cat("RP-2014 Female:    $", round(annuity_rp2014_f, 2), "\n")
```