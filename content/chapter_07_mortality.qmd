# Mortality Table Implementation

## Standard Mortality Tables

Mortality tables are fundamental to pension calculations. This section provides practical implementation of standard actuarial tables [@soa_mortality2014].

### Basic Mortality Table Structure

```{r}
#| label: mortality-table-setup
# Create a simplified mortality table structure
# In practice, you would load this from standard tables like RP-2014
create_sample_mortality_table <- function() {
  ages <- 20:110

  # Simplified Gompertz-Makeham mortality rates
  # q_x = A + B * C^x where A = 0.0001, B = 0.00005, C = 1.08
  q_x <- pmin(0.0001 + 0.00005 * 1.08^ages, 0.95)

  mortality_table <- data.frame(
    age = ages,
    q_x = q_x,
    p_x = 1 - q_x
  )

  # Calculate survival probabilities from age 20
  mortality_table$l_x <- numeric(length(ages))
  mortality_table$l_x[1] <- 100000 # Radix of 100,000

  for (i in 2:length(ages)) {
    mortality_table$l_x[i] <- mortality_table$l_x[i - 1] *
      mortality_table$p_x[i - 1]
  }

  return(mortality_table)
}

# Create sample table
mortality_table <- create_sample_mortality_table()

# Display first few rows
head(mortality_table, 10)
```

### Survival Probability Functions

```{r}
#| label: survival-functions
# Function to calculate t-year survival probability from age x
calculate_survival_probability <- function(mortality_table, age_x, years_t) {
  if (
    age_x < min(mortality_table$age) ||
      age_x + years_t > max(mortality_table$age)
  ) {
    return(0)
  }

  start_idx <- which(mortality_table$age == age_x)
  end_idx <- which(mortality_table$age == age_x + years_t)

  if (length(start_idx) == 0 || length(end_idx) == 0) {
    return(0)
  }

  return(mortality_table$l_x[end_idx] / mortality_table$l_x[start_idx])
}

# Function to calculate life annuity values (immediate or deferred)
calculate_life_annuity <- function(
  mortality_table,
  start_age,
  payment_start_age = NULL,
  discount_rate,
  annual_payment = 1
) {
  # If no payment start age specified, annuity starts immediately
  if (is.null(payment_start_age)) {
    payment_start_age <- start_age
  }

  # Calculate probability of survival to payment start (1 if immediate)
  if (payment_start_age > start_age) {
    survival_to_payment <- calculate_survival_probability(
      mortality_table,
      start_age,
      payment_start_age - start_age
    )
  } else {
    survival_to_payment <- 1
  }

  # Calculate present value of annuity starting at payment_start_age
  annuity_value <- 0
  current_age <- payment_start_age

  while (
    current_age <= max(mortality_table$age) &&
      current_age < payment_start_age + 50
  ) {
    # Limit to reasonable age

    # Survival probability from payment start to current age
    if (current_age == payment_start_age) {
      surv_from_payment_start <- 1
    } else {
      surv_from_payment_start <- calculate_survival_probability(
        mortality_table,
        payment_start_age,
        current_age - payment_start_age
      )
    }

    if (surv_from_payment_start < 0.001) {
      break
    } # Negligible probability

    # Present value of payment at current age (from original start age)
    years_from_start <- current_age - start_age
    pv_payment <- annual_payment *
      surv_from_payment_start *
      (1 + discount_rate)^(-years_from_start)

    annuity_value <- annuity_value + pv_payment
    current_age <- current_age + 1
  }

  return(annuity_value * survival_to_payment)
}

# Wrapper function for deferred annuity (backwards compatibility)
calculate_deferred_annuity <- function(
  mortality_table,
  start_age,
  payment_age,
  discount_rate,
  annual_payment = 1
) {
  return(calculate_life_annuity(
    mortality_table,
    start_age,
    payment_age,
    discount_rate,
    annual_payment
  ))
}

# Examples
survival_30_to_65 <- calculate_survival_probability(mortality_table, 30, 35)
cat("Probability of surviving from age 30 to 65:", survival_30_to_65, "\n")

annuity_30_defer_to_65 <- calculate_life_annuity(mortality_table, 30, 65, 0.07)
cat(
  "Present value of $1 annuity deferred from age 30 to 65:",
  annuity_30_defer_to_65,
  "\n"
)
```

### Multiple Decrement Tables

```{r}
#| label: multiple-decrements
# Create a service table with multiple decrements
create_service_table <- function(
  mortality_table,
  withdrawal_rates = NULL,
  disability_rates = NULL
) {
  ages <- mortality_table$age
  n_ages <- length(ages)

  # Default withdrawal rates (higher at younger ages)
  if (is.null(withdrawal_rates)) {
    withdrawal_rates <- pmax(0.15 * exp(-0.1 * (ages - 20)), 0.01)
    withdrawal_rates[ages >= 65] <- 0 # No withdrawal after retirement
  }

  # Default disability rates (increasing with age)
  if (is.null(disability_rates)) {
    disability_rates <- pmin(0.001 * 1.05^(ages - 20), 0.02)
    disability_rates[ages >= 65] <- 0 # No disability after retirement
  }

  service_table <- data.frame(
    age = ages,
    q_x_death = mortality_table$q_x,
    q_x_withdrawal = withdrawal_rates,
    q_x_disability = disability_rates
  )

  # Calculate composite survival probability
  service_table$q_x_total <- with(
    service_table,
    q_x_death + q_x_withdrawal + q_x_disability
  )
  service_table$q_x_total <- pmin(service_table$q_x_total, 0.95) # Cap at 95%
  service_table$p_x_active <- 1 - service_table$q_x_total

  # Calculate active life table
  service_table$l_x_active <- numeric(n_ages)
  service_table$l_x_active[1] <- 100000

  for (i in 2:n_ages) {
    service_table$l_x_active[i] <- service_table$l_x_active[i - 1] *
      service_table$p_x_active[i - 1]
  }

  return(service_table)
}

# Create service table
service_table <- create_service_table(mortality_table)

# Display sample
head(service_table[service_table$age %in% 25:35, ], 10)
```